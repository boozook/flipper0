name: Tests
on:
  pull_request:
  push:
    branches:
      - master

env:
  RUSTUP_MAX_RETRIES: 10
  CARGO_INCREMENTAL: 1
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always

  # for actions/cache@v3:
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 6

  FLIPPER_FW_SRC_PATH: ${{ github.workspace }}/fz_fw/
  FLIPPER_REPO_CLONE_PATH: ${{ github.workspace }}/fz_fw/

jobs:
  test-support-crates:
    needs: style
    name: Test ${{ matrix.crate }} (${{ matrix.os.short }})
    runs-on: ${{ matrix.os.full }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: true
      matrix:
        os:
          - { full: macos-latest, short: macos }
          - { full: ubuntu-latest, short: linux }
          - { full: windows-latest, short: win }
        crate:
          - fam
          - flipper0-build-cfg
          - flipper0-fam-build
          - flipper0-fap-build
          - flipper0-macro

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Rust toolchain
        run: rustup update; rustup install nightly

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('rust-toolchain.toml') }}
          restore-keys: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('rust-toolchain.toml') }}

      - name: Check
        run: cargo +nightly check -p=${{ matrix.crate }}

      - name: Test
        run: cargo +nightly test -p=${{ matrix.crate }} --no-fail-fast

  build-bindings-prebuilt:
    needs: test-support-crates
    name: Build ${{ matrix.crate }} ${{ matrix.profile && 'R' || 'D' }} [prebuilt] (${{ matrix.os.short }})
    runs-on: ${{ matrix.os.full }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: true
      matrix:
        os:
          - { full: macos-latest, short: macos }
          - { full: ubuntu-latest, short: linux }
          - { full: windows-latest, short: win }
        crate:
          - flipper0-sys
          - flipper0
        profile:
          - "" # debug
          - --release
        target:
          - --target=thumbv7em-none-eabihf

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('rust-toolchain.toml') }}
          restore-keys: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('rust-toolchain.toml') }}

      - name: Rust toolchain
        run: rustup update; rustup install nightly; rustup target add thumbv7em-none-eabihf

      - name: Build
        run: cargo +nightly build -p=${{ matrix.crate }} ${{ matrix.profile }} ${{ matrix.target }}

  build-bindings-source:
    needs:
      - build-bindings-prebuilt
      - test-support-crates
      - random
    if: needs.random.outputs.value == 1
    name: Build bindings ${{ matrix.profile && 'R' || 'D' }} [${{ matrix.rev }}] (${{ matrix.os.short }})
    runs-on: ${{ matrix.os.full }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: true
      matrix:
        os:
          - { full: macos-latest, short: macos }
          - { full: ubuntu-latest, short: linux }
          - { full: windows-latest, short: win }
        profile:
          - "" # debug
          - --release
        target:
          - thumbv7em-none-eabihf
        rev:
          - 0.69.0 # minimal supported version
          - release-candidate
        features:
          - --no-default-features --features="use-local-sdk"
          - --no-default-features --features="use-local-sdk, panic, macro, allocator-global, oom-global"
          - --no-default-features --features="use-local-sdk, panic, macro, allocator-global, oom-global, derive-default, derive-eq, derive-copy, derive-hash, derive-ord, derive-partialeq, derive-partialord, derive-debug"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('rust-toolchain.toml') }}
          restore-keys: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('rust-toolchain.toml') }}

      - name: Rust toolchain
        run: rustup update; rustup install nightly; rustup target add ${{ matrix.target }}

      - name: Cache SDK
        uses: actions/cache@v3
        id: cache-sdk
        with:
          path: ${{ env.FLIPPER_FW_SRC_PATH }}
          key: f0-fw-${{ matrix.rev }}-${{ runner.os }}

      - name: fix permissions
        if: steps.cache-sdk.outputs.cache-hit == 'true' && runner.os != 'Windows'
        run: chmod -R a+x ${{ env.FLIPPER_FW_SRC_PATH }}

      - name: Checkout SDK
        if: (steps.cache-sdk.outputs.cache-hit != 'true') || contains('release-candidate, dev', matrix.rev)
        uses: actions/checkout@v3
        with:
          repository: flipperdevices/flipperzero-firmware
          path: ${{ env.FLIPPER_FW_SRC_PATH }}
          ref: ${{ matrix.rev }}
          submodules: true
          clean: false

      - name: script .ext
        if: runner.os == 'Windows'
        run: echo "FBT_SHELL_EXT=.cmd" >> $GITHUB_ENV

      - name: Setup SDK
        if: (steps.cache-sdk.outputs.cache-hit != 'true') || contains('release-candidate, dev', matrix.rev)
        run: |
          cd $FLIPPER_FW_SRC_PATH
          if [ ! -d toolchain ]; then
            pip3 install -r scripts/requirements.txt
            ./fbt${{ env.FBT_SHELL_EXT || '' }}
          fi

      - name: Build flipper0-sys
        run: cargo +nightly build -p=flipper0-sys ${{ matrix.profile }} --target=${{ matrix.target }} ${{ matrix.features }}

      - name: Build flipper0
        # TODO: not supported yet
        if: ${{ runner.os != 'Windows' }}
        run: cargo +nightly build -p=flipper0 ${{ matrix.profile }} --target=${{ matrix.target }} ${{ matrix.features }}

  build-examples:
    needs:
      - build-bindings-prebuilt
      - random
    if: needs.random.outputs.value == 0
    name: Build E ${{ matrix.crate.name }} ${{ matrix.profile && 'R' || 'D' }} [${{ matrix.rev }}] (${{ matrix.os.short }})
    runs-on: ${{ matrix.os.full }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: true
      matrix:
        os:
          - { full: macos-latest, short: macos }
          - { full: ubuntu-latest, short: linux }
          # TODO: not supported yet
          # - { full: windows-latest, short: win }
        crate:
          - { name: hello-fap, arg: --example, fap: false }
          - { name: fap-manifest-metadata-example, arg: -p, fap: false }
          - { name: fap-manifest-toml-example, arg: -p, fap: false }
          - { name: fap-build-example, arg: -p, fap: true }
          - { name: main-macro-example, arg: -p, fap: true }
          - { name: fs-example, arg: -p, fap: true }
        profile:
          - --release
          - ""
        rev:
          - 0.69.0 # minimal supported version
          - release-candidate

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('rust-toolchain.toml') }}
          restore-keys: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('rust-toolchain.toml') }}

      - name: Rust toolchain
        run: rustup update; rustup install nightly; rustup target add thumbv7em-none-eabihf

      - name: Cache SDK
        if: matrix.crate.fap
        uses: actions/cache@v3
        id: cache-sdk
        with:
          path: ${{ env.FLIPPER_FW_SRC_PATH }}
          key: f0-fw-${{ matrix.rev }}-${{ runner.os }}

      - name: fix permissions
        if: matrix.crate.fap && steps.cache-sdk.outputs.cache-hit == 'true' && runner.os != 'Windows'
        run: chmod -R a+x ${{ env.FLIPPER_FW_SRC_PATH }}

      - name: Checkout SDK
        if: matrix.crate.fap && ((steps.cache-sdk.outputs.cache-hit != 'true') || contains('release-candidate, dev', matrix.rev))
        uses: actions/checkout@v3
        with:
          repository: flipperdevices/flipperzero-firmware
          path: ${{ env.FLIPPER_FW_SRC_PATH }}
          ref: ${{ matrix.rev }}
          submodules: true
          clean: false

      - name: script .ext
        if: matrix.crate.fap && (runner.os == 'Windows')
        run: echo "FBT_SHELL_EXT=.cmd" >> $GITHUB_ENV

      - name: Setup SDK
        if: matrix.crate.fap && ((steps.cache-sdk.outputs.cache-hit != 'true') || contains('release-candidate, dev', matrix.rev))
        run: |
          cd $FLIPPER_FW_SRC_PATH
          if [ ! -d toolchain ]; then
            pip3 install -r scripts/requirements.txt
            ./fbt${{ env.FBT_SHELL_EXT || '' }}
          fi

      - name: Build
        run: cargo +nightly build ${{ matrix.crate.arg }} ${{ matrix.crate.name }} ${{ matrix.profile }} --target=thumbv7em-none-eabihf

      - name: FBT
        if: matrix.crate.fap
        run: |
          cd $FLIPPER_FW_SRC_PATH
          ./fbt${{ env.FBT_SHELL_EXT || '' }} fap_${{ matrix.crate.name }}
          # COMPACT=1 DEBUG=1

  style:
    name: Style
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('rust-toolchain.toml') }}
          restore-keys: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('rust-toolchain.toml') }}

      - name: Fmt
        run: cargo fmt --all -- --check

      # - name: Install Clippy
      #   run: rustup component add clippy --toolchain=nightly

      # - name: Clippy
      #   uses: actions-rs/clippy-check@v1.0.7
      #   with:
      #     name: Clippy report
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     args: --all

  # Just a little jobs number reducer.
  random:
    name: "🎲 (${{ github.event.pull_request.commits || 0 }})"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Number
        id: number
        run: |
          echo "value=$(expr ${{ github.event.pull_request.commits || 2 }} % 2)" >> $GITHUB_OUTPUT

    outputs:
      value: ${{ steps.number.outputs.value }}
